// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sync.proto
#ifndef GRPC_sync_2eproto__INCLUDED
#define GRPC_sync_2eproto__INCLUDED

#include "sync.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace csce438 {

// The messenger service definition.
class SYNCService final {
 public:
  static constexpr char const* service_full_name() {
    return "csce438.SYNCService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::csce438::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>> AsyncNewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>>(AsyncNewClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>> PrepareAsyncNewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>>(PrepareAsyncNewClientRaw(context, request, cq));
    }
    virtual ::grpc::Status NewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::csce438::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>> AsyncNewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>>(AsyncNewFollowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>> PrepareAsyncNewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>>(PrepareAsyncNewFollowerRaw(context, request, cq));
    }
    virtual ::grpc::Status TimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::csce438::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>> AsyncTimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>>(AsyncTimelineUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>> PrepareAsyncTimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>>(PrepareAsyncTimelineUpdateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void NewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo* request, ::csce438::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo* request, ::csce438::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo* request, ::csce438::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo* request, ::csce438::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo* request, ::csce438::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo* request, ::csce438::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>* AsyncNewClientRaw(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>* PrepareAsyncNewClientRaw(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>* AsyncNewFollowerRaw(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>* PrepareAsyncNewFollowerRaw(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>* AsyncTimelineUpdateRaw(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Empty>* PrepareAsyncTimelineUpdateRaw(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::csce438::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>> AsyncNewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>>(AsyncNewClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>> PrepareAsyncNewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>>(PrepareAsyncNewClientRaw(context, request, cq));
    }
    ::grpc::Status NewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::csce438::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>> AsyncNewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>>(AsyncNewFollowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>> PrepareAsyncNewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>>(PrepareAsyncNewFollowerRaw(context, request, cq));
    }
    ::grpc::Status TimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::csce438::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>> AsyncTimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>>(AsyncTimelineUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>> PrepareAsyncTimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Empty>>(PrepareAsyncTimelineUpdateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo* request, ::csce438::Empty* response, std::function<void(::grpc::Status)>) override;
      void NewClient(::grpc::ClientContext* context, const ::csce438::NewClientInfo* request, ::csce438::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo* request, ::csce438::Empty* response, std::function<void(::grpc::Status)>) override;
      void NewFollower(::grpc::ClientContext* context, const ::csce438::FollowerInfo* request, ::csce438::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo* request, ::csce438::Empty* response, std::function<void(::grpc::Status)>) override;
      void TimelineUpdate(::grpc::ClientContext* context, const ::csce438::TimelineInfo* request, ::csce438::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::csce438::Empty>* AsyncNewClientRaw(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Empty>* PrepareAsyncNewClientRaw(::grpc::ClientContext* context, const ::csce438::NewClientInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Empty>* AsyncNewFollowerRaw(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Empty>* PrepareAsyncNewFollowerRaw(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Empty>* AsyncTimelineUpdateRaw(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Empty>* PrepareAsyncTimelineUpdateRaw(::grpc::ClientContext* context, const ::csce438::TimelineInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewClient_;
    const ::grpc::internal::RpcMethod rpcmethod_NewFollower_;
    const ::grpc::internal::RpcMethod rpcmethod_TimelineUpdate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NewClient(::grpc::ServerContext* context, const ::csce438::NewClientInfo* request, ::csce438::Empty* response);
    virtual ::grpc::Status NewFollower(::grpc::ServerContext* context, const ::csce438::FollowerInfo* request, ::csce438::Empty* response);
    virtual ::grpc::Status TimelineUpdate(::grpc::ServerContext* context, const ::csce438::TimelineInfo* request, ::csce438::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NewClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewClient(::grpc::ServerContext* /*context*/, const ::csce438::NewClientInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewClient(::grpc::ServerContext* context, ::csce438::NewClientInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewFollower() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NewFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowerInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewFollower(::grpc::ServerContext* context, ::csce438::FollowerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TimelineUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TimelineUpdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TimelineUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimelineUpdate(::grpc::ServerContext* /*context*/, const ::csce438::TimelineInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimelineUpdate(::grpc::ServerContext* context, ::csce438::TimelineInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewClient<WithAsyncMethod_NewFollower<WithAsyncMethod_TimelineUpdate<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NewClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewClient() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::NewClientInfo, ::csce438::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::NewClientInfo* request, ::csce438::Empty* response) { return this->NewClient(context, request, response); }));}
    void SetMessageAllocatorFor_NewClient(
        ::grpc::MessageAllocator< ::csce438::NewClientInfo, ::csce438::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::NewClientInfo, ::csce438::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewClient(::grpc::ServerContext* /*context*/, const ::csce438::NewClientInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewClient(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::NewClientInfo* /*request*/, ::csce438::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewFollower() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::FollowerInfo, ::csce438::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::FollowerInfo* request, ::csce438::Empty* response) { return this->NewFollower(context, request, response); }));}
    void SetMessageAllocatorFor_NewFollower(
        ::grpc::MessageAllocator< ::csce438::FollowerInfo, ::csce438::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::FollowerInfo, ::csce438::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowerInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewFollower(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::FollowerInfo* /*request*/, ::csce438::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TimelineUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TimelineUpdate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::TimelineInfo, ::csce438::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::TimelineInfo* request, ::csce438::Empty* response) { return this->TimelineUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_TimelineUpdate(
        ::grpc::MessageAllocator< ::csce438::TimelineInfo, ::csce438::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::TimelineInfo, ::csce438::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TimelineUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimelineUpdate(::grpc::ServerContext* /*context*/, const ::csce438::TimelineInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TimelineUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::TimelineInfo* /*request*/, ::csce438::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_NewClient<WithCallbackMethod_NewFollower<WithCallbackMethod_TimelineUpdate<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NewClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewClient(::grpc::ServerContext* /*context*/, const ::csce438::NewClientInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewFollower() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NewFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowerInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TimelineUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TimelineUpdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TimelineUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimelineUpdate(::grpc::ServerContext* /*context*/, const ::csce438::TimelineInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewClient() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NewClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewClient(::grpc::ServerContext* /*context*/, const ::csce438::NewClientInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewFollower() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NewFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowerInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewFollower(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TimelineUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TimelineUpdate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TimelineUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimelineUpdate(::grpc::ServerContext* /*context*/, const ::csce438::TimelineInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimelineUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewClient() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewClient(::grpc::ServerContext* /*context*/, const ::csce438::NewClientInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewFollower() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewFollower(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowerInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewFollower(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TimelineUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TimelineUpdate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TimelineUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_TimelineUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimelineUpdate(::grpc::ServerContext* /*context*/, const ::csce438::TimelineInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TimelineUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::NewClientInfo, ::csce438::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::NewClientInfo, ::csce438::Empty>* streamer) {
                       return this->StreamedNewClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewClient(::grpc::ServerContext* /*context*/, const ::csce438::NewClientInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::NewClientInfo,::csce438::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewFollower() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::FollowerInfo, ::csce438::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::FollowerInfo, ::csce438::Empty>* streamer) {
                       return this->StreamedNewFollower(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowerInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewFollower(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::FollowerInfo,::csce438::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TimelineUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TimelineUpdate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::TimelineInfo, ::csce438::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::TimelineInfo, ::csce438::Empty>* streamer) {
                       return this->StreamedTimelineUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TimelineUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TimelineUpdate(::grpc::ServerContext* /*context*/, const ::csce438::TimelineInfo* /*request*/, ::csce438::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTimelineUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::TimelineInfo,::csce438::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewClient<WithStreamedUnaryMethod_NewFollower<WithStreamedUnaryMethod_TimelineUpdate<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewClient<WithStreamedUnaryMethod_NewFollower<WithStreamedUnaryMethod_TimelineUpdate<Service > > > StreamedService;
};

}  // namespace csce438


#endif  // GRPC_sync_2eproto__INCLUDED
