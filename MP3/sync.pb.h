// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sync_2eproto;
namespace csce438 {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FollowerInfo;
struct FollowerInfoDefaultTypeInternal;
extern FollowerInfoDefaultTypeInternal _FollowerInfo_default_instance_;
class NewClientInfo;
struct NewClientInfoDefaultTypeInternal;
extern NewClientInfoDefaultTypeInternal _NewClientInfo_default_instance_;
class TimelineInfo;
struct TimelineInfoDefaultTypeInternal;
extern TimelineInfoDefaultTypeInternal _TimelineInfo_default_instance_;
}  // namespace csce438
PROTOBUF_NAMESPACE_OPEN
template<> ::csce438::Empty* Arena::CreateMaybeMessage<::csce438::Empty>(Arena*);
template<> ::csce438::FollowerInfo* Arena::CreateMaybeMessage<::csce438::FollowerInfo>(Arena*);
template<> ::csce438::NewClientInfo* Arena::CreateMaybeMessage<::csce438::NewClientInfo>(Arena*);
template<> ::csce438::TimelineInfo* Arena::CreateMaybeMessage<::csce438::TimelineInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace csce438 {

// ===================================================================

class NewClientInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csce438.NewClientInfo) */ {
 public:
  inline NewClientInfo() : NewClientInfo(nullptr) {}
  ~NewClientInfo() override;
  explicit constexpr NewClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewClientInfo(const NewClientInfo& from);
  NewClientInfo(NewClientInfo&& from) noexcept
    : NewClientInfo() {
    *this = ::std::move(from);
  }

  inline NewClientInfo& operator=(const NewClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewClientInfo& operator=(NewClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewClientInfo* internal_default_instance() {
    return reinterpret_cast<const NewClientInfo*>(
               &_NewClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewClientInfo& a, NewClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NewClientInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewClientInfo* New() const final {
    return new NewClientInfo();
  }

  NewClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewClientInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewClientInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewClientInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewClientInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "csce438.NewClientInfo";
  }
  protected:
  explicit NewClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:csce438.NewClientInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class FollowerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csce438.FollowerInfo) */ {
 public:
  inline FollowerInfo() : FollowerInfo(nullptr) {}
  ~FollowerInfo() override;
  explicit constexpr FollowerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FollowerInfo(const FollowerInfo& from);
  FollowerInfo(FollowerInfo&& from) noexcept
    : FollowerInfo() {
    *this = ::std::move(from);
  }

  inline FollowerInfo& operator=(const FollowerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowerInfo& operator=(FollowerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FollowerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FollowerInfo* internal_default_instance() {
    return reinterpret_cast<const FollowerInfo*>(
               &_FollowerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FollowerInfo& a, FollowerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FollowerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FollowerInfo* New() const final {
    return new FollowerInfo();
  }

  FollowerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FollowerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FollowerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FollowerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "csce438.FollowerInfo";
  }
  protected:
  explicit FollowerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowerIdFieldNumber = 1,
    kFollowedIdFieldNumber = 2,
  };
  // string follower_id = 1;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // string followed_id = 2;
  void clear_followed_id();
  const std::string& followed_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_followed_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_followed_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_followed_id();
  void set_allocated_followed_id(std::string* followed_id);
  private:
  const std::string& _internal_followed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_followed_id(const std::string& value);
  std::string* _internal_mutable_followed_id();
  public:

  // @@protoc_insertion_point(class_scope:csce438.FollowerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr followed_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:csce438.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return new Empty();
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "csce438.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:csce438.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class TimelineInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csce438.TimelineInfo) */ {
 public:
  inline TimelineInfo() : TimelineInfo(nullptr) {}
  ~TimelineInfo() override;
  explicit constexpr TimelineInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimelineInfo(const TimelineInfo& from);
  TimelineInfo(TimelineInfo&& from) noexcept
    : TimelineInfo() {
    *this = ::std::move(from);
  }

  inline TimelineInfo& operator=(const TimelineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimelineInfo& operator=(TimelineInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimelineInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimelineInfo* internal_default_instance() {
    return reinterpret_cast<const TimelineInfo*>(
               &_TimelineInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimelineInfo& a, TimelineInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TimelineInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimelineInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimelineInfo* New() const final {
    return new TimelineInfo();
  }

  TimelineInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimelineInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimelineInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TimelineInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimelineInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "csce438.TimelineInfo";
  }
  protected:
  explicit TimelineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kFollowerIdFieldNumber = 1,
  };
  // repeated string entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // string follower_id = 1;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // @@protoc_insertion_point(class_scope:csce438.TimelineInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewClientInfo

// string client_id = 1;
inline void NewClientInfo::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& NewClientInfo::client_id() const {
  // @@protoc_insertion_point(field_get:csce438.NewClientInfo.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewClientInfo::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.NewClientInfo.client_id)
}
inline std::string* NewClientInfo::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:csce438.NewClientInfo.client_id)
  return _s;
}
inline const std::string& NewClientInfo::_internal_client_id() const {
  return client_id_.Get();
}
inline void NewClientInfo::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewClientInfo::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewClientInfo::release_client_id() {
  // @@protoc_insertion_point(field_release:csce438.NewClientInfo.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewClientInfo::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:csce438.NewClientInfo.client_id)
}

// -------------------------------------------------------------------

// FollowerInfo

// string follower_id = 1;
inline void FollowerInfo::clear_follower_id() {
  follower_id_.ClearToEmpty();
}
inline const std::string& FollowerInfo::follower_id() const {
  // @@protoc_insertion_point(field_get:csce438.FollowerInfo.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowerInfo::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 follower_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.FollowerInfo.follower_id)
}
inline std::string* FollowerInfo::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:csce438.FollowerInfo.follower_id)
  return _s;
}
inline const std::string& FollowerInfo::_internal_follower_id() const {
  return follower_id_.Get();
}
inline void FollowerInfo::_internal_set_follower_id(const std::string& value) {
  
  follower_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FollowerInfo::_internal_mutable_follower_id() {
  
  return follower_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FollowerInfo::release_follower_id() {
  // @@protoc_insertion_point(field_release:csce438.FollowerInfo.follower_id)
  return follower_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FollowerInfo::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  follower_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), follower_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:csce438.FollowerInfo.follower_id)
}

// string followed_id = 2;
inline void FollowerInfo::clear_followed_id() {
  followed_id_.ClearToEmpty();
}
inline const std::string& FollowerInfo::followed_id() const {
  // @@protoc_insertion_point(field_get:csce438.FollowerInfo.followed_id)
  return _internal_followed_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowerInfo::set_followed_id(ArgT0&& arg0, ArgT... args) {
 
 followed_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.FollowerInfo.followed_id)
}
inline std::string* FollowerInfo::mutable_followed_id() {
  std::string* _s = _internal_mutable_followed_id();
  // @@protoc_insertion_point(field_mutable:csce438.FollowerInfo.followed_id)
  return _s;
}
inline const std::string& FollowerInfo::_internal_followed_id() const {
  return followed_id_.Get();
}
inline void FollowerInfo::_internal_set_followed_id(const std::string& value) {
  
  followed_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FollowerInfo::_internal_mutable_followed_id() {
  
  return followed_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FollowerInfo::release_followed_id() {
  // @@protoc_insertion_point(field_release:csce438.FollowerInfo.followed_id)
  return followed_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FollowerInfo::set_allocated_followed_id(std::string* followed_id) {
  if (followed_id != nullptr) {
    
  } else {
    
  }
  followed_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), followed_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:csce438.FollowerInfo.followed_id)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// TimelineInfo

// string follower_id = 1;
inline void TimelineInfo::clear_follower_id() {
  follower_id_.ClearToEmpty();
}
inline const std::string& TimelineInfo::follower_id() const {
  // @@protoc_insertion_point(field_get:csce438.TimelineInfo.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TimelineInfo::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 follower_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.TimelineInfo.follower_id)
}
inline std::string* TimelineInfo::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:csce438.TimelineInfo.follower_id)
  return _s;
}
inline const std::string& TimelineInfo::_internal_follower_id() const {
  return follower_id_.Get();
}
inline void TimelineInfo::_internal_set_follower_id(const std::string& value) {
  
  follower_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TimelineInfo::_internal_mutable_follower_id() {
  
  return follower_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TimelineInfo::release_follower_id() {
  // @@protoc_insertion_point(field_release:csce438.TimelineInfo.follower_id)
  return follower_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TimelineInfo::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  follower_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), follower_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:csce438.TimelineInfo.follower_id)
}

// repeated string entries = 2;
inline int TimelineInfo::_internal_entries_size() const {
  return entries_.size();
}
inline int TimelineInfo::entries_size() const {
  return _internal_entries_size();
}
inline void TimelineInfo::clear_entries() {
  entries_.Clear();
}
inline std::string* TimelineInfo::add_entries() {
  std::string* _s = _internal_add_entries();
  // @@protoc_insertion_point(field_add_mutable:csce438.TimelineInfo.entries)
  return _s;
}
inline const std::string& TimelineInfo::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const std::string& TimelineInfo::entries(int index) const {
  // @@protoc_insertion_point(field_get:csce438.TimelineInfo.entries)
  return _internal_entries(index);
}
inline std::string* TimelineInfo::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:csce438.TimelineInfo.entries)
  return entries_.Mutable(index);
}
inline void TimelineInfo::set_entries(int index, const std::string& value) {
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:csce438.TimelineInfo.entries)
}
inline void TimelineInfo::set_entries(int index, std::string&& value) {
  entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:csce438.TimelineInfo.entries)
}
inline void TimelineInfo::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csce438.TimelineInfo.entries)
}
inline void TimelineInfo::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csce438.TimelineInfo.entries)
}
inline std::string* TimelineInfo::_internal_add_entries() {
  return entries_.Add();
}
inline void TimelineInfo::add_entries(const std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:csce438.TimelineInfo.entries)
}
inline void TimelineInfo::add_entries(std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:csce438.TimelineInfo.entries)
}
inline void TimelineInfo::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csce438.TimelineInfo.entries)
}
inline void TimelineInfo::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csce438.TimelineInfo.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TimelineInfo::entries() const {
  // @@protoc_insertion_point(field_list:csce438.TimelineInfo.entries)
  return entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TimelineInfo::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:csce438.TimelineInfo.entries)
  return &entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace csce438

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sync_2eproto
