// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coord.proto

#include "coord.pb.h"
#include "coord.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace csce438 {

static const char* COORDService_method_names[] = {
  "/csce438.COORDService/GetServer",
  "/csce438.COORDService/GetSlave",
  "/csce438.COORDService/GetFollowSyncer",
  "/csce438.COORDService/BeginServer",
  "/csce438.COORDService/Pulse",
};

std::unique_ptr< COORDService::Stub> COORDService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< COORDService::Stub> stub(new COORDService::Stub(channel, options));
  return stub;
}

COORDService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetServer_(COORDService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSlave_(COORDService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFollowSyncer_(COORDService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BeginServer_(COORDService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pulse_(COORDService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status COORDService::Stub::GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::ServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ClientInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServer_, context, request, response);
}

void COORDService::Stub::async::GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ClientInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServer_, context, request, response, std::move(f));
}

void COORDService::Stub::async::GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* COORDService::Stub::PrepareAsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ServerInfo, ::csce438::ClientInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* COORDService::Stub::AsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status COORDService::Stub::GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::ServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ClientInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSlave_, context, request, response);
}

void COORDService::Stub::async::GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ClientInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlave_, context, request, response, std::move(f));
}

void COORDService::Stub::async::GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlave_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* COORDService::Stub::PrepareAsyncGetSlaveRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ServerInfo, ::csce438::ClientInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSlave_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* COORDService::Stub::AsyncGetSlaveRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSlaveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status COORDService::Stub::GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::SyncerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ClientInfo, ::csce438::SyncerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFollowSyncer_, context, request, response);
}

void COORDService::Stub::async::GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ClientInfo, ::csce438::SyncerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowSyncer_, context, request, response, std::move(f));
}

void COORDService::Stub::async::GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowSyncer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::SyncerInfo>* COORDService::Stub::PrepareAsyncGetFollowSyncerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::SyncerInfo, ::csce438::ClientInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFollowSyncer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::SyncerInfo>* COORDService::Stub::AsyncGetFollowSyncerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFollowSyncerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status COORDService::Stub::BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::ServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ServerInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BeginServer_, context, request, response);
}

void COORDService::Stub::async::BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ServerInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BeginServer_, context, request, response, std::move(f));
}

void COORDService::Stub::async::BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BeginServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* COORDService::Stub::PrepareAsyncBeginServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ServerInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BeginServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* COORDService::Stub::AsyncBeginServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBeginServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status COORDService::Stub::Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::None* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ServerInfo, ::csce438::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Pulse_, context, request, response);
}

void COORDService::Stub::async::Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ServerInfo, ::csce438::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pulse_, context, request, response, std::move(f));
}

void COORDService::Stub::async::Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pulse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::None>* COORDService::Stub::PrepareAsyncPulseRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::None, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Pulse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::None>* COORDService::Stub::AsyncPulseRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPulseRaw(context, request, cq);
  result->StartCall();
  return result;
}

COORDService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      COORDService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< COORDService::Service, ::csce438::ClientInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](COORDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ClientInfo* req,
             ::csce438::ServerInfo* resp) {
               return service->GetServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      COORDService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< COORDService::Service, ::csce438::ClientInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](COORDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ClientInfo* req,
             ::csce438::ServerInfo* resp) {
               return service->GetSlave(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      COORDService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< COORDService::Service, ::csce438::ClientInfo, ::csce438::SyncerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](COORDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ClientInfo* req,
             ::csce438::SyncerInfo* resp) {
               return service->GetFollowSyncer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      COORDService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< COORDService::Service, ::csce438::ServerInfo, ::csce438::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](COORDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ServerInfo* req,
             ::csce438::ServerInfo* resp) {
               return service->BeginServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      COORDService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< COORDService::Service, ::csce438::ServerInfo, ::csce438::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](COORDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ServerInfo* req,
             ::csce438::None* resp) {
               return service->Pulse(ctx, req, resp);
             }, this)));
}

COORDService::Service::~Service() {
}

::grpc::Status COORDService::Service::GetServer(::grpc::ServerContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status COORDService::Service::GetSlave(::grpc::ServerContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status COORDService::Service::GetFollowSyncer(::grpc::ServerContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status COORDService::Service::BeginServer(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status COORDService::Service::Pulse(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csce438

