// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coord.proto
#ifndef GRPC_coord_2eproto__INCLUDED
#define GRPC_coord_2eproto__INCLUDED

#include "coord.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace csce438 {

// The messenger service definition.
class COORDService final {
 public:
  static constexpr char const* service_full_name() {
    return "csce438.COORDService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> AsyncGetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(AsyncGetServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> PrepareAsyncGetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(PrepareAsyncGetServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> AsyncGetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(AsyncGetSlaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> PrepareAsyncGetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(PrepareAsyncGetSlaveRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::SyncerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::SyncerInfo>> AsyncGetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::SyncerInfo>>(AsyncGetFollowSyncerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::SyncerInfo>> PrepareAsyncGetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::SyncerInfo>>(PrepareAsyncGetFollowSyncerRaw(context, request, cq));
    }
    virtual ::grpc::Status BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> AsyncBeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(AsyncBeginServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> PrepareAsyncBeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(PrepareAsyncBeginServerRaw(context, request, cq));
    }
    virtual ::grpc::Status Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::None* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::None>> AsyncPulse(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::None>>(AsyncPulseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::None>> PrepareAsyncPulse(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::None>>(PrepareAsyncPulseRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* AsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* PrepareAsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* AsyncGetSlaveRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* PrepareAsyncGetSlaveRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::SyncerInfo>* AsyncGetFollowSyncerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::SyncerInfo>* PrepareAsyncGetFollowSyncerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* AsyncBeginServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* PrepareAsyncBeginServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::None>* AsyncPulseRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::None>* PrepareAsyncPulseRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> AsyncGetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(AsyncGetServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> PrepareAsyncGetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(PrepareAsyncGetServerRaw(context, request, cq));
    }
    ::grpc::Status GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> AsyncGetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(AsyncGetSlaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> PrepareAsyncGetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(PrepareAsyncGetSlaveRaw(context, request, cq));
    }
    ::grpc::Status GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::csce438::SyncerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::SyncerInfo>> AsyncGetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::SyncerInfo>>(AsyncGetFollowSyncerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::SyncerInfo>> PrepareAsyncGetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::SyncerInfo>>(PrepareAsyncGetFollowSyncerRaw(context, request, cq));
    }
    ::grpc::Status BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> AsyncBeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(AsyncBeginServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> PrepareAsyncBeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(PrepareAsyncBeginServerRaw(context, request, cq));
    }
    ::grpc::Status Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::None* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::None>> AsyncPulse(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::None>>(AsyncPulseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::None>> PrepareAsyncPulse(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::None>>(PrepareAsyncPulseRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetServer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetSlave(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetFollowSyncer(::grpc::ClientContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void BeginServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response, std::function<void(::grpc::Status)>) override;
      void Pulse(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* AsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* PrepareAsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* AsyncGetSlaveRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* PrepareAsyncGetSlaveRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::SyncerInfo>* AsyncGetFollowSyncerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::SyncerInfo>* PrepareAsyncGetFollowSyncerRaw(::grpc::ClientContext* context, const ::csce438::ClientInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* AsyncBeginServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* PrepareAsyncBeginServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::None>* AsyncPulseRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::None>* PrepareAsyncPulseRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSlave_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFollowSyncer_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginServer_;
    const ::grpc::internal::RpcMethod rpcmethod_Pulse_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetServer(::grpc::ServerContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response);
    virtual ::grpc::Status GetSlave(::grpc::ServerContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response);
    virtual ::grpc::Status GetFollowSyncer(::grpc::ServerContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response);
    virtual ::grpc::Status BeginServer(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response);
    virtual ::grpc::Status Pulse(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServer(::grpc::ServerContext* context, ::csce438::ClientInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSlave() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlave(::grpc::ServerContext* context, ::csce438::ClientInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFollowSyncer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFollowSyncer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetFollowSyncer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::SyncerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFollowSyncer(::grpc::ServerContext* context, ::csce438::ClientInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::SyncerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BeginServer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BeginServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginServer(::grpc::ServerContext* context, ::csce438::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Pulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Pulse() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Pulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pulse(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::None* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPulse(::grpc::ServerContext* context, ::csce438::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::None>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetServer<WithAsyncMethod_GetSlave<WithAsyncMethod_GetFollowSyncer<WithAsyncMethod_BeginServer<WithAsyncMethod_Pulse<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServer() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ClientInfo, ::csce438::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response) { return this->GetServer(context, request, response); }));}
    void SetMessageAllocatorFor_GetServer(
        ::grpc::MessageAllocator< ::csce438::ClientInfo, ::csce438::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ClientInfo, ::csce438::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSlave() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ClientInfo, ::csce438::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ClientInfo* request, ::csce438::ServerInfo* response) { return this->GetSlave(context, request, response); }));}
    void SetMessageAllocatorFor_GetSlave(
        ::grpc::MessageAllocator< ::csce438::ClientInfo, ::csce438::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ClientInfo, ::csce438::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSlave(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFollowSyncer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFollowSyncer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ClientInfo, ::csce438::SyncerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ClientInfo* request, ::csce438::SyncerInfo* response) { return this->GetFollowSyncer(context, request, response); }));}
    void SetMessageAllocatorFor_GetFollowSyncer(
        ::grpc::MessageAllocator< ::csce438::ClientInfo, ::csce438::SyncerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ClientInfo, ::csce438::SyncerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFollowSyncer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::SyncerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFollowSyncer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::SyncerInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BeginServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BeginServer() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response) { return this->BeginServer(context, request, response); }));}
    void SetMessageAllocatorFor_BeginServer(
        ::grpc::MessageAllocator< ::csce438::ServerInfo, ::csce438::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BeginServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginServer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Pulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Pulse() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::None>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ServerInfo* request, ::csce438::None* response) { return this->Pulse(context, request, response); }));}
    void SetMessageAllocatorFor_Pulse(
        ::grpc::MessageAllocator< ::csce438::ServerInfo, ::csce438::None>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::None>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Pulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pulse(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::None* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Pulse(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::None* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetServer<WithCallbackMethod_GetSlave<WithCallbackMethod_GetFollowSyncer<WithCallbackMethod_BeginServer<WithCallbackMethod_Pulse<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSlave() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFollowSyncer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFollowSyncer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetFollowSyncer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::SyncerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BeginServer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BeginServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Pulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Pulse() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Pulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pulse(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::None* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSlave() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlave(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFollowSyncer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFollowSyncer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetFollowSyncer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::SyncerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFollowSyncer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BeginServer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BeginServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Pulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Pulse() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Pulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pulse(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::None* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPulse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServer() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSlave() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSlave(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSlave(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFollowSyncer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFollowSyncer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFollowSyncer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFollowSyncer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::SyncerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFollowSyncer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BeginServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BeginServer() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BeginServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_BeginServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Pulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Pulse() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Pulse(context, request, response); }));
    }
    ~WithRawCallbackMethod_Pulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pulse(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::None* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Pulse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ClientInfo, ::csce438::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ClientInfo, ::csce438::ServerInfo>* streamer) {
                       return this->StreamedGetServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ClientInfo,::csce438::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSlave() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ClientInfo, ::csce438::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ClientInfo, ::csce438::ServerInfo>* streamer) {
                       return this->StreamedGetSlave(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSlave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ClientInfo,::csce438::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFollowSyncer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFollowSyncer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ClientInfo, ::csce438::SyncerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ClientInfo, ::csce438::SyncerInfo>* streamer) {
                       return this->StreamedGetFollowSyncer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFollowSyncer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFollowSyncer(::grpc::ServerContext* /*context*/, const ::csce438::ClientInfo* /*request*/, ::csce438::SyncerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFollowSyncer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ClientInfo,::csce438::SyncerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BeginServer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ServerInfo, ::csce438::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ServerInfo, ::csce438::ServerInfo>* streamer) {
                       return this->StreamedBeginServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BeginServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ServerInfo,::csce438::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Pulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Pulse() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ServerInfo, ::csce438::None>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ServerInfo, ::csce438::None>* streamer) {
                       return this->StreamedPulse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Pulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Pulse(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::None* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPulse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ServerInfo,::csce438::None>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetServer<WithStreamedUnaryMethod_GetSlave<WithStreamedUnaryMethod_GetFollowSyncer<WithStreamedUnaryMethod_BeginServer<WithStreamedUnaryMethod_Pulse<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetServer<WithStreamedUnaryMethod_GetSlave<WithStreamedUnaryMethod_GetFollowSyncer<WithStreamedUnaryMethod_BeginServer<WithStreamedUnaryMethod_Pulse<Service > > > > > StreamedService;
};

}  // namespace csce438


#endif  // GRPC_coord_2eproto__INCLUDED
